第一种：使用邻接矩阵
#include<iostream>
#include<queue>
using namespace std;

class Map{
    int len; //顶点数
    int *v;  //顶点入度数组
    int **p; //邻接矩阵
public:
    Map(){
        cin>>len;

        v=new int[len];
        p=new int*[len];
            
        for(int i=0;i<len;i++){
           v[i]=0;
           p[i]=new int[len];
       }

        for(int i=0;i<len;i++){
            for(int j=0;j<len;j++){
              cin>>p[i][j];
              v[j]+=p[i][j];   //计算顶点j的入度，注意，是j所在的列相加
            }
        }
    }

    void TopologicalSort(){ 
       queue<int>q;
       for(int i=0;i<len;i++){  //扫描入度序列，将入度为0的顶点都进栈，可能不止一个顶点入度为0
          if(v[i]==0)
            q.push(i);
       }

       while(!q.empty()){
          int t=q.front();
          q.pop();

          for(int i=0;i<len;i++){
            if(p[t][i]==1){  //扫描t所在的行，若为1，则顶点i的入度减一
                v[i]--;
                if(v[i]==0) //若顶点i入度为0，则进队列
                    q.push(i);
            }
          }
         cout<<t<<" ";
       }
       cout<<endl;
    }

    ~Map(){
        for(int i=0;i<len;i++){
            delete[] p[i];
        }
        delete[] p;
        delete[] v;
        len=0;
    }
};

int main(){
    int t;
    cin>>t;
    while(t--){
      Map test;
      test.TopologicalSort();
    }
    return 0;
}

////////////////////////////////////////
第二种：使用邻接表
#include<iostream>
#include<stack>
using namespace std;

struct node{
  int data;      //对于顶点数组，这个域充当该顶点的入度
  node* next;
  node(){data=0;next=NULL;}  //构造函数初始化
  node(int i){data=i;next=NULL;}
};

class Map{
    int len; //顶点数
    node *edge; //顶点数组
public:
    Map(){
        cin>>len;

        edge=new node[len];

        int x;
        for(int i=0;i<len;i++){
            for(int j=0;j<len;j++){
              cin>>x;
              if(x==1){     
                node *s=new node(j); //将边插入到顶点i的头结点后
                s->next=edge[i].next;
                edge[i].next=s;

                edge[j].data++;  //顶点j的入度加1
              }
            }
        }
    }

    void TopologicalSort(){ 
       stack<int>q;     //因为插入结点时，是插入到表头，是倒序，因此用栈来保留入度为0的顶点，保证输出时按从小到大的顺序输出。如果插入是在尾部进行的，用队列保留入度为0的顶点。
       for(int i=0;i<len;i++){
          if(edge[i].data==0)
            q.push(i);
       }

       int k;
       node *p;
       while(!q.empty()){
          int t=q.top();   //从栈顶取一个元素，并访问
          q.pop();

          cout<<t<<" ";

          p=edge[t].next;
          while(p){           //遍历该元素的链表
             k=p->data;

             edge[k].data--;
             if(edge[k].data==0)
                q.push(k);

             p=p->next;
          }
       }
       cout<<endl;
    }

    ~Map(){
        delete[] edge;
        len=0;
    }
};

int main(){
    int t;
    cin>>t;
    while(t--){
      Map test;
      test.TopologicalSort();
    }
    return 0;
}

///////////当插入在链表尾部进行时，用队列
#include<iostream>
#include<queue>
using namespace std;

struct node{
  int data;      //对于顶点数组，这个域充当该顶点的入度
  node* next;
  node(){data=0;next=NULL;}  //构造函数初始化
  node(int i){data=i;next=NULL;}
};

class Map{
    int len; //顶点数
    node *edge; //顶点数组
public:
    Map(){
        cin>>len;

        edge=new node[len];

        int x;
        for(int i=0;i<len;i++){
            for(int j=0;j<len;j++){
              cin>>x;
              if(x==1){
                node *s=new node(j);
                node *p=edge+i;
                while(p->next)
                      p=p->next;
                p->next=s;
               edge[j].data++;  //顶点j的入度加1
              }
            }
        }
    }

    void TopologicalSort(){
       queue<int>q;     
       for(int i=0;i<len;i++){
          if(edge[i].data==0)
            q.push(i);
       }

       int k;
       node *p;
       while(!q.empty()){
          int t=q.front();   //从栈顶取一个元素，并访问
          q.pop();

          cout<<t<<" ";

          p=edge[t].next;
          while(p){           //遍历该元素的链表
             k=p->data;

             edge[k].data--;
             if(edge[k].data==0)
                q.push(k);

             p=p->next;
          }
       }
       cout<<endl;
    }

    ~Map(){
        delete[] edge;
        len=0;
    }
};

int main(){
    int t;
    cin>>t;
    while(t--){
      Map test;
      test.TopologicalSort();
    }
    return 0;
}